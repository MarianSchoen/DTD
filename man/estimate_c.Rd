% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_estimateC.R
\name{estimate_c}
\alias{estimate_c}
\title{Estimating C}
\usage{
estimate_c(
  X.matrix = NA,
  new.data,
  DTD.model,
  estimate.c.type = "decide.on.model"
)
}
\arguments{
\item{X.matrix}{numeric matrix, with features/genes as rows,
and cell types as column. Each column of X.matrix is a reference
expression profile. A trained DTD model includes X.matrix, it has been
trained on. Therefore, X.matrix should only be set, if the 'DTD.model'
is not a DTD model.}

\item{new.data}{numeric matrix with samples as columns,
and features/genes as rows. In the formula above denoated as Y.}

\item{DTD.model}{either a numeric vector with length of nrow(X), or a list
returned by \code{\link{train_deconvolution_model}},
\code{\link{DTD_cv_lambda_cxx}}, or \code{\link{descent_generalized_fista}}.
In the equation above the DTD.model provides the vector g.}

\item{estimate.c.type}{string, either "non_negative", or "direct".
Indicates how the algorithm finds the solution of
\eqn{arg min_C ||diag(g)(Y - XC)||_2}.
\itemize{
   \item If 'estimate.c.type' is set to "direct",
 there is no regularization (see \code{\link{estimate_c}}),
   \item if 'estimate.c.type' is set to "non_negative",
 the estimates "C" must not be negative (non-negative least squares)
(see (see \code{\link{estimate_nn_c}}))
}}
}
\value{
numeric matrix with ncol(X.matrix) rows, and ncol(new.data) columns
}
\description{
Given a reference matrix X, a matrix of bulks Y and a g-vector,
"estimate_c" finds the solution of \deqn{arg min || diag(g) (Y - XC) ||_2}.
It either uses
\itemize{
  \item 'direct' solution: \deqn{ C(g) = (X^T \Gamma X )^(-1) X^T \Gamma Y}
  \item 'non_negative' solution, where \eqn{C_i \ge 0}
}
}
\examples{
library(DTD)
set.seed(1)
# simulate random data:
random.data <- generate_random_data(
  n.types = 5,
  n.samples.per.type = 1,
  n.features = 100
)

# simulate a true c
# (this is not used by the estimate_c function, it is only used to show the result!)
true.c <- rnorm(n = ncol(random.data), mean = 0.1, sd = 0.5)

# calculate bulk y = Xc * some_error
bulk <- random.data \%*\% true.c * rnorm(n = nrow(random.data), mean = 1, sd = 0.01)

# estimate c
estimated.c <- estimate_c(
  X.matrix = random.data,
  new.data = bulk,
  DTD.model = rep(1, nrow(random.data)),
  estimate.c.type = "direct"
)
# visualize that the estimated c are close to the true c
plot(true.c, estimated.c)

estimated.nn.c <- estimate_c(
  X.matrix = random.data,
  new.data = bulk,
  DTD.model = rep(1, nrow(random.data)),
  estimate.c.type = "non_negative"
)
# visualize that the non negative estimated c (notice, the y axis)
plot(true.c, estimated.nn.c)
}
