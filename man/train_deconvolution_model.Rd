% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_trainDeconvMod.R
\name{train_deconvolution_model}
\alias{train_deconvolution_model}
\title{Train a DTD model based on correlation loss function}
\usage{
train_deconvolution_model(
  tweak,
  X.matrix,
  train.data.list,
  test.data.list = NULL,
  estimate.c.type,
  use.implementation = "cxx",
  ...
)
}
\arguments{
\item{tweak}{numeric vector with length of nrow(X).
In the Loss function above tweak is named "g"
Notice, the names of the vector will be kept, and are of use later on.}

\item{X.matrix}{numeric matrix, with features/genes as rows,
and cell types as column. Each column of X.matrix is a reference
expression profile}

\item{train.data.list}{list, with two entries, a numeric matrix each,
named 'mixtures' and 'quantities'
Within this list the train/test cross validation will be done.
(see Vignette `browseVignettes("DTD")` for details).
Generate 'train.data.list' using \code{\link{mix_samples}}
or \code{\link{mix_samples_with_jitter}}.}

\item{test.data.list}{list, with two entries, a numeric matrix each,
named 'mixtures' and 'quantities'
On this data, the trained model will be tested. Notice, this data is not
 shown to the optimization.
(see Vignette `browseVignettes("DTD")` for details).
Generate 'test.data.list' using \code{\link{mix_samples}}
or \code{\link{mix_samples_with_jitter}}.}

\item{estimate.c.type}{string, either "non_negative", or "direct".
Indicates how the algorithm finds the solution of
\eqn{arg min_C ||diag(g)(Y - XC)||_2}.
\itemize{
   \item If 'estimate.c.type' is set to "direct",
 there is no regularization (see \code{\link{estimate_c}}),
   \item if 'estimate.c.type' is set to "non_negative",
 the estimates "C" must not be negative (non-negative least squares)
(see (see \code{\link{estimate_nn_c}}))
}}

\item{use.implementation}{string, either "R" or "cxx".
Chooses between the R reference implementation and the faster c++
implementation.
Notice, if 'use.implementation' is set to "R" the cross validation
function \code{\link{DTD_cv_lambda_R}} is used.}

\item{...}{parameters passed to \code{\link{DTD_cv_lambda_cxx}}, or
\code{\link{DTD_cv_lambda_R}}}
}
\value{
list, including 5 entries:
\itemize{
    \item cv.obj' (see \code{\link{DTD_cv_lambda_cxx}})
    \item 'best.model' (see \code{\link{DTD_cv_lambda_cxx}})
    \item 'reference.X'
    \item 'estimate.c.type'
    \item 'pics' (see `browseVignettes("DTD")`)
}
}
\description{
Loss-function learning Digital Tissue Deconvolution (DTD) adapts a
deconvolution model to its biological context. 'train_deconvolution_model'
is the main function of the DTD package.\cr
As input it takes the reference matrix X, a list of training data and a
start vector 'tweak'. Then, it iteratively finds that vector 'g' that
deconvolutes best based on the loss fucntion:
\deqn{L(g) = - \sum cor(C_{j,.} \widehat C_{j,.}(g) ) + \lambda ||g||_1}
The 'train_deconvolution_model' function calls the cross validation function
\code{\link{DTD_cv_lambda_cxx}} (or \code{\link{DTD_cv_lambda_R}},
depending on 'use.implementation') to find the optimal lambda.
After the cross validation, it optimizes a model on the complete dataset
with the optimal \eqn{\lambda}.
}
\details{
For an example see `browseVignettes("DTD")`
}
