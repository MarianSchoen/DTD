% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_gPath.R
\name{ggplot_gPath}
\alias{ggplot_gPath}
\title{Visualize the path of each \eqn{g_i} over all iterations}
\usage{
ggplot_gPath(fista.output, number.pics = 3,
  G.TRANSFORM.FUN = DTD::identity, ITER.TRANSFORM.FUN = log10,
  y.lab = "g", x.lab = "log10(iteration)", subset = NA, main = "",
  plot_legend = FALSE)
}
\arguments{
\item{fista.output}{: list with "Tweak" and "History" entry. The result of a \code{\link{descent_generalized_fista}} call}

\item{number.pics}{: integer, into how many pictures should the resutlt be split}

\item{G.TRANSFORM.FUN}{: function, that expects a vector of numerics, and returns a vector of the same length.
Will be applied on fista.output$Tweak. Set G.TRANSFORM.FUN to identity if no transformation is required.
If you change G.TRANSFORM.FUN don't forget to adjust the y.lab parameter.}

\item{ITER.TRANSFORM.FUN}{: function, that expects a vector of numerics, and returns a vector of the same length.
Will be applied on the iteration/x.axis of the plot. Set ITER.TRANSFORM.FUN to identity if no transformation is required.
If you change ITER.TRANSFORM.FUN don't forget to adjust the x.lab parameter}

\item{y.lab}{string, used as y label on the plot}

\item{x.lab}{string, used as x label on the plot}

\item{subset}{vector of strings, or NA that match the rownames of fista.output$History. Only these entries will be visualized}

\item{main}{string, used as title of the plot}

\item{plot_legend}{boolean, should the legend be plotted? Notice that the legend will be plotted in a additional figure, and can be visualized via grid::grid.draw}
}
\value{
list, with "gPath" entry. "gPath" will be a ggplot object.
Depending on "plot_legend" the list has a second entry named "legend". "legend" will be a grid object.
}
\description{
With this function the path of each \eqn{g_i} over all iterations can be plotted.
Notice, that if there are many genes in your model, it may be hard to distinguish between each path.
As a solution the parameter "number.pics" can be set to a higher integer.
Then, the visualization will be split into more pictures.
In each picture all \eqn{g_i} get collected that end up in the same quantile range.
E.g if you split into 3 pictures, the first picture includes all genes that result into the
quantile range from 0% Qu to 33% Qu of all g.
There are parameters (G.TRANSFORM.FUn and ITER.TRANSFORM.FUN) to transform the g vector, and iteration number.
These might help to make the plot more understandable, e.g. if the distribution of the g vector is dominated by same outliers, applying a log transformation might help.
In most of the scenarios the major changes in the g vector occur in the early iterations. Focus on this part via a log transformation.
For an example see `browseVignettes("DTD")`
}
