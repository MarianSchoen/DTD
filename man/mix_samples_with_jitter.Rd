% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_mix_with_Jitter.R
\name{mix_samples_with_jitter}
\alias{mix_samples_with_jitter}
\title{Mix samples with Jitter}
\usage{
mix_samples_with_jitter(sample.names, special.samples, n.samples,
  datamatrix, pheno, verbose = FALSE, single.special = FALSE,
  add.jitter = FALSE, chosen.mean = 1, chosen.sd = 0.05,
  min.amount.samples = 1, per.type = 1, included.in.X = NA)
}
\arguments{
\item{sample.names}{vector of strings, have to match colnames(datamatrix).}

\item{special.samples}{vector of strings, have to match colnames(datamatrix), these samples will
occur with higher quantites within the mix data.}

\item{n.samples}{integer, how many mixtures should be drawn}

\item{datamatrix}{numeric matrix, with samples as columns, and features as rows}

\item{pheno}{named list of characters, indicates which of the samples in datamatrix belongs to which type in sample.names/special.names}

\item{verbose}{boolean, should function tell about progression? (Defaults to FALSE)}

\item{single.special}{boolean, should all special names be used? or only a single one (Defaults to FALSE)}

\item{add.jitter}{boolean, should the mixtures be mulitplied with a vector of normally distributed numbers? (JITTER)}

\item{chosen.mean}{numeric, mean of jitter (Default: 1)}

\item{chosen.sd}{numeric, standard deviation of jitter (Default: 0.05)}

\item{min.amount.samples}{integer, how many samples have to be present such that it averages over them,
instead of taking only 1 (Default: 1)}

\item{per.type}{integer, how many samples "per type" should be used for each mixture (Default: 1)}

\item{included.in.X}{list of strings, which cell types are included in the reference matrix.
The mix function will mix all samples in the data set, but will only return the quantity matrix
for the types included in X (and in the right ordering).
Defaults to NA, then no reordering/selecting will be done}
}
\value{
list with two entries. "quantities" matrix (nrow = ncol(datamatrix), ncol = nMixtures) and "mixture"
matrix (nrow = nrow(datamatrix), ncol = nMixtures)
}
\description{
"mix_samples_with_jitter" takes pheno information (sample.names, special.names) and a expression matrix.
Its output is a expression matrix with in-silicio mixtures and a quantity matrix.
Each sample of the output is a mixture of input samples, multiplied with Jitter vector.
"mix_samples_with_jitter" mixes samples in a way that they look similar to biological data.
For example, in a tumor tissue there are several cells included, but we expect that
most of them are tumor cells. Therefore, the mix_samples_with_jitter function expects a
list of samples which represent immune cells (and occur in minor fractions) and a
list of special samples (which occur in major fractions)
}
\examples{
library(DTD)
random.data <- generate_random_data(n.types = 10,
                                    n.samples.per.type = 10,
                                    n.features = 500,
                                    sample.type = "Cell",
                                    feature.type = "gene")

# normalize all samples to the same amount of counts:
random.data <- normalize_to_count(random.data)

# extract indicator list.
# This list contains the type of the sample as value, and the sample name as names
indicator.list <- gsub("^Cell[0-9]*\\\\.", "", colnames(random.data))
names(indicator.list) <- colnames(random.data)

# First, decide which cells should be deconvoluted.
include.in.X <- c("Type2", "Type3", "Type4", "Type5")

# here, I declare "Type1" as Tumor cells, and all other as immune cells
special.samples <- c("Type1")
all.samples <- unique(indicator.list)
sample.names <- all.samples[- which(all.samples \%in\% special.samples)]

training.data <- mix_samples_with_jitter(sample.names = sample.names,
                                         special.samples = special.samples,
                                     n.samples = 1e3,
                                     datamatrix = random.data,
                                     pheno = indicator.list,
                                     single.special = FALSE,
                                     add.jitter = TRUE,
                                     chosen.mean = 1,
                                     chosen.sd = 0.05,
                                     min.amount.samples = 1)

}
